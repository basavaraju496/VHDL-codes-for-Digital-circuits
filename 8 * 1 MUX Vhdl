                                                             TESTBENCH
library IEEE;
use IEEE.std_logic_1164.all;
entity multiplexer_tb is
end multiplexer_tb;
architecture tb of multiplexer_tb is
component multiplexer is
Port ( S : in std_logic_vector(2 downto 0);
D : in std_logic_vector(7 downto 0);
Y, Y1 : out std_logic);
end component;
signal Y, Y1 : std_logic;
signal S : std_logic_vector(2 downto 0);
signal D : std_logic_vector(7 downto 0);
begin
uut: multiplexer port map(S => S, D => D, Y => Y, Y1 => Y1);
stim: process
begin
D<="10110100";
S<="000";
wait for 20 ns;
D<="10110100";
S<="001";
wait for 20 ns;
D<="10110100";
S<="010";
wait for 20 ns;
D<="10110100";
S<="011";
wait for 20 ns;
D<="10110100";
S<="100";
wait for 20 ns;
D<="10110100";
S<="101";
wait for 20 ns;
D<="10110100";
S<="110";
wait for 20 ns;
D<="10110100";
S<="111";
wait for 20 ns;
wait;
end process;
end tb;
                                                                   DESIGN CODE
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
entity multiplexer is
Port ( S : in std_logic_vector(2 downto 0);
D : in std_logic_vector(7 downto 0);
Y,Y1 : out std_logic);
end multiplexer;
architecture Behavioral of multiplexer is
begin
process ( S,D)
begin
case S is
when "000" => Y<= d(0) ;Y1 <= not d(0);
when "001" => Y<= d(1) ;Y1 <= not d(1);
when "010" => Y<= d(2) ;Y1 <= not d(2);
when "011" => Y<= d(3) ;Y1 <= not d(3);
when "100" => Y<= d(4) ;Y1 <= not d(4);
when "101" => Y<= d(5) ;Y1 <= not d(5);
when "110" => Y<= d(6) ;Y1 <= not d(6);
when "111" => Y<= d(7) ;Y1 <= not d(7);
when others => Y<='1';
end case;
end process;
end Behavioral;
